{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "SignupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zen-backend-dev-signup"
      }
    },
    "LoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zen-backend-dev-login"
      }
    },
    "ConfirmUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zen-backend-dev-confirmUser"
      }
    },
    "SubmitAssessmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zen-backend-dev-submitAssessment"
      }
    },
    "AssessmentListLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zen-backend-dev-assessmentList"
      }
    },
    "ListCounsellorsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zen-backend-dev-listCounsellors"
      }
    },
    "CheckAvailabilityLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zen-backend-dev-checkAvailability"
      }
    },
    "CreateAppointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zen-backend-dev-createAppointment"
      }
    },
    "CreateConsultationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zen-backend-dev-createConsultation"
      }
    },
    "ConsultationAvailabilityLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zen-backend-dev-consultationAvailability"
      }
    },
    "SeedAdminLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zen-backend-dev-seedAdmin"
      }
    },
    "MeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/zen-backend-dev-me"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "zen-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zen-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zen-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem",
                    "cognito-idp:SignUp",
                    "cognito-idp:ConfirmSignUp",
                    "cognito-idp:InitiateAuth",
                    "ssm:GetParameter"
                  ],
                  "Resource": [
                    "arn:aws:ssm:ap-south-1:521529522607:parameter/zen/adminSeedToken",
                    "arn:aws:dynamodb:ap-south-1:*:table/ZenUsers",
                    "arn:aws:dynamodb:ap-south-1:*:table/ZenUsers/index/EmailIndex"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:Query"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:ap-south-1:*:table/ZenAssessments",
                    "arn:aws:dynamodb:ap-south-1:*:table/ZenAssessments/index/UserIndex"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Scan",
                    "dynamodb:GetItem"
                  ],
                  "Resource": "arn:aws:dynamodb:ap-south-1:*:table/ZenCounsellors"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:Query"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:ap-south-1:*:table/ZenAppointments",
                    "arn:aws:dynamodb:ap-south-1:*:table/ZenAppointments/index/CounsellorDateSlotIndex"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:ap-south-1:*:table/ZenConsultations",
                    "arn:aws:dynamodb:ap-south-1:*:table/ZenConsultations/index/DateIndex"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "zen-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "SignupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
          "S3Key": "serverless/zen-backend/dev/1755923904486-2025-08-23T04:38:24.486Z/zen-backend.zip"
        },
        "Handler": "functions/auth/signup.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "zen-backend-dev-signup",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "ZenUsers",
            "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
            "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
            "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
            "ASSESSMENTS_TABLE": "ZenAssessments",
            "COUNSELLORS_TABLE": "ZenCounsellors",
            "APPOINTMENTS_TABLE": "ZenAppointments",
            "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
            "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
            "CONSULTATIONS_TABLE": "ZenConsultations"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignupLogGroup"
      ]
    },
    "LoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
          "S3Key": "serverless/zen-backend/dev/1755923904486-2025-08-23T04:38:24.486Z/zen-backend.zip"
        },
        "Handler": "functions/auth/login.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "zen-backend-dev-login",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "ZenUsers",
            "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
            "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
            "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
            "ASSESSMENTS_TABLE": "ZenAssessments",
            "COUNSELLORS_TABLE": "ZenCounsellors",
            "APPOINTMENTS_TABLE": "ZenAppointments",
            "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
            "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
            "CONSULTATIONS_TABLE": "ZenConsultations"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LoginLogGroup"
      ]
    },
    "ConfirmUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
          "S3Key": "serverless/zen-backend/dev/1755923904486-2025-08-23T04:38:24.486Z/zen-backend.zip"
        },
        "Handler": "functions/auth/confirm.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "zen-backend-dev-confirmUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "ZenUsers",
            "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
            "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
            "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
            "ASSESSMENTS_TABLE": "ZenAssessments",
            "COUNSELLORS_TABLE": "ZenCounsellors",
            "APPOINTMENTS_TABLE": "ZenAppointments",
            "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
            "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
            "CONSULTATIONS_TABLE": "ZenConsultations"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ConfirmUserLogGroup"
      ]
    },
    "SubmitAssessmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
          "S3Key": "serverless/zen-backend/dev/1755923904486-2025-08-23T04:38:24.486Z/zen-backend.zip"
        },
        "Handler": "functions/assessment/submit.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "zen-backend-dev-submitAssessment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "ZenUsers",
            "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
            "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
            "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
            "ASSESSMENTS_TABLE": "ZenAssessments",
            "COUNSELLORS_TABLE": "ZenCounsellors",
            "APPOINTMENTS_TABLE": "ZenAppointments",
            "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
            "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
            "CONSULTATIONS_TABLE": "ZenConsultations"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SubmitAssessmentLogGroup"
      ]
    },
    "AssessmentListLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
          "S3Key": "serverless/zen-backend/dev/1755923904486-2025-08-23T04:38:24.486Z/zen-backend.zip"
        },
        "Handler": "functions/assessment/list.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "zen-backend-dev-assessmentList",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "ZenUsers",
            "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
            "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
            "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
            "ASSESSMENTS_TABLE": "ZenAssessments",
            "COUNSELLORS_TABLE": "ZenCounsellors",
            "APPOINTMENTS_TABLE": "ZenAppointments",
            "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
            "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
            "CONSULTATIONS_TABLE": "ZenConsultations"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AssessmentListLogGroup"
      ]
    },
    "ListCounsellorsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
          "S3Key": "serverless/zen-backend/dev/1755923904486-2025-08-23T04:38:24.486Z/zen-backend.zip"
        },
        "Handler": "functions/counsellors/list.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "zen-backend-dev-listCounsellors",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "ZenUsers",
            "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
            "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
            "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
            "ASSESSMENTS_TABLE": "ZenAssessments",
            "COUNSELLORS_TABLE": "ZenCounsellors",
            "APPOINTMENTS_TABLE": "ZenAppointments",
            "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
            "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
            "CONSULTATIONS_TABLE": "ZenConsultations"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListCounsellorsLogGroup"
      ]
    },
    "CheckAvailabilityLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
          "S3Key": "serverless/zen-backend/dev/1755923904486-2025-08-23T04:38:24.486Z/zen-backend.zip"
        },
        "Handler": "functions/appointments/checkAvailability.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "zen-backend-dev-checkAvailability",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "ZenUsers",
            "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
            "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
            "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
            "ASSESSMENTS_TABLE": "ZenAssessments",
            "COUNSELLORS_TABLE": "ZenCounsellors",
            "APPOINTMENTS_TABLE": "ZenAppointments",
            "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
            "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
            "CONSULTATIONS_TABLE": "ZenConsultations"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CheckAvailabilityLogGroup"
      ]
    },
    "CreateAppointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
          "S3Key": "serverless/zen-backend/dev/1755923904486-2025-08-23T04:38:24.486Z/zen-backend.zip"
        },
        "Handler": "functions/appointments/createAppointment.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "zen-backend-dev-createAppointment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "ZenUsers",
            "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
            "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
            "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
            "ASSESSMENTS_TABLE": "ZenAssessments",
            "COUNSELLORS_TABLE": "ZenCounsellors",
            "APPOINTMENTS_TABLE": "ZenAppointments",
            "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
            "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
            "CONSULTATIONS_TABLE": "ZenConsultations"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateAppointmentLogGroup"
      ]
    },
    "CreateConsultationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
          "S3Key": "serverless/zen-backend/dev/1755923904486-2025-08-23T04:38:24.486Z/zen-backend.zip"
        },
        "Handler": "functions/consultations/create.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "zen-backend-dev-createConsultation",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "ZenUsers",
            "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
            "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
            "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
            "ASSESSMENTS_TABLE": "ZenAssessments",
            "COUNSELLORS_TABLE": "ZenCounsellors",
            "APPOINTMENTS_TABLE": "ZenAppointments",
            "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
            "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
            "CONSULTATIONS_TABLE": "ZenConsultations"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateConsultationLogGroup"
      ]
    },
    "ConsultationAvailabilityLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
          "S3Key": "serverless/zen-backend/dev/1755923904486-2025-08-23T04:38:24.486Z/zen-backend.zip"
        },
        "Handler": "functions/consultations/checkAvailability.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "zen-backend-dev-consultationAvailability",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "ZenUsers",
            "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
            "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
            "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
            "ASSESSMENTS_TABLE": "ZenAssessments",
            "COUNSELLORS_TABLE": "ZenCounsellors",
            "APPOINTMENTS_TABLE": "ZenAppointments",
            "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
            "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
            "CONSULTATIONS_TABLE": "ZenConsultations"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ConsultationAvailabilityLogGroup"
      ]
    },
    "SeedAdminLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
          "S3Key": "serverless/zen-backend/dev/1755923904486-2025-08-23T04:38:24.486Z/zen-backend.zip"
        },
        "Handler": "functions/admin/seed.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "zen-backend-dev-seedAdmin",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "ZenUsers",
            "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
            "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
            "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
            "ASSESSMENTS_TABLE": "ZenAssessments",
            "COUNSELLORS_TABLE": "ZenCounsellors",
            "APPOINTMENTS_TABLE": "ZenAppointments",
            "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
            "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
            "CONSULTATIONS_TABLE": "ZenConsultations"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SeedAdminLogGroup"
      ]
    },
    "MeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
          "S3Key": "serverless/zen-backend/dev/1755923904486-2025-08-23T04:38:24.486Z/zen-backend.zip"
        },
        "Handler": "functions/auth/me.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "zen-backend-dev-me",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "USERS_TABLE": "ZenUsers",
            "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
            "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
            "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
            "ASSESSMENTS_TABLE": "ZenAssessments",
            "COUNSELLORS_TABLE": "ZenCounsellors",
            "APPOINTMENTS_TABLE": "ZenAppointments",
            "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
            "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
            "CONSULTATIONS_TABLE": "ZenConsultations"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MeLogGroup"
      ]
    },
    "SignupLambdaVersionfxSTu2CD1jfVk3xFTo9kd2CveFVgPu8JsBq7UL7d8Pw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignupLambdaFunction"
        },
        "CodeSha256": "j3/y3WGYDWAsT/bZC4Z8E8zqvitSbQJWU8mxAc1ldjg="
      }
    },
    "LoginLambdaVersioncim8vn2jU8n7NGP5OnGNRENmSk3aRL2Fso643E8RJ5Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoginLambdaFunction"
        },
        "CodeSha256": "j3/y3WGYDWAsT/bZC4Z8E8zqvitSbQJWU8mxAc1ldjg="
      }
    },
    "ConfirmUserLambdaVersionzMTEEsg5Av1sHZWdeCqv1Cpq3411cS9JzpLhaE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ConfirmUserLambdaFunction"
        },
        "CodeSha256": "j3/y3WGYDWAsT/bZC4Z8E8zqvitSbQJWU8mxAc1ldjg="
      }
    },
    "SubmitAssessmentLambdaVersionQhkyCwc4NsBBVPE0TJI2Ccfsa6R1pMIV1ujdkfBg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubmitAssessmentLambdaFunction"
        },
        "CodeSha256": "j3/y3WGYDWAsT/bZC4Z8E8zqvitSbQJWU8mxAc1ldjg="
      }
    },
    "AssessmentListLambdaVersionLy5vvG2sOVDWOQV38b4QmNJJhILVp07zRmT7tqQ88": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AssessmentListLambdaFunction"
        },
        "CodeSha256": "j3/y3WGYDWAsT/bZC4Z8E8zqvitSbQJWU8mxAc1ldjg="
      }
    },
    "ListCounsellorsLambdaVersiontLdnbwl5P350WtDrnNlN5xxvVI7eRPFIO1nVEmABk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListCounsellorsLambdaFunction"
        },
        "CodeSha256": "j3/y3WGYDWAsT/bZC4Z8E8zqvitSbQJWU8mxAc1ldjg="
      }
    },
    "CheckAvailabilityLambdaVersionoFkjcFzOlReSbX2zlKIIx0if8Vwfx6j4BWDjvQexw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CheckAvailabilityLambdaFunction"
        },
        "CodeSha256": "j3/y3WGYDWAsT/bZC4Z8E8zqvitSbQJWU8mxAc1ldjg="
      }
    },
    "CreateAppointmentLambdaVersionVZgrYZRAuxltVZUm5gNOAEjKo9MLkSXZ6IDbVdlk4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateAppointmentLambdaFunction"
        },
        "CodeSha256": "j3/y3WGYDWAsT/bZC4Z8E8zqvitSbQJWU8mxAc1ldjg="
      }
    },
    "CreateConsultationLambdaVersionKQX9JQY8j5n31cekqzfFmHMCP7L3EUw54RM22CGsv4M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateConsultationLambdaFunction"
        },
        "CodeSha256": "j3/y3WGYDWAsT/bZC4Z8E8zqvitSbQJWU8mxAc1ldjg="
      }
    },
    "ConsultationAvailabilityLambdaVersionZl4zk6aOrvGQZN14xFW3hRdul5gFT487P8keJ7vs0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ConsultationAvailabilityLambdaFunction"
        },
        "CodeSha256": "j3/y3WGYDWAsT/bZC4Z8E8zqvitSbQJWU8mxAc1ldjg="
      }
    },
    "SeedAdminLambdaVersionLumGb1x5rWHcZRwYMO7s0MZUhktsChfJYeawclzmTzw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SeedAdminLambdaFunction"
        },
        "CodeSha256": "j3/y3WGYDWAsT/bZC4Z8E8zqvitSbQJWU8mxAc1ldjg="
      }
    },
    "MeLambdaVersionTRrfz08uuAQzfQPO1NCEvYqvsGjjt0UVQqxDEoQg3zo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MeLambdaFunction"
        },
        "CodeSha256": "j3/y3WGYDWAsT/bZC4Z8E8zqvitSbQJWU8mxAc1ldjg="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-zen-backend",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceAuth": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthSignup": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "signup",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthLogin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "login",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthConfirm": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "confirm",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthMe": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "me",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAssessment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "assessment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCounsellors": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "counsellors",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAppointments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "appointments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAppointmentsCheckDashavailability": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAppointments"
        },
        "PathPart": "check-availability",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceConsultations": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "consultations",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceConsultationsAvailability": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceConsultations"
        },
        "PathPart": "availability",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdmin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "admin",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminSeed": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "seed",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthSignupOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthSignup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthLoginOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthConfirmOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthConfirm"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAssessmentOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAssessment"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCounsellorsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCounsellors"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAppointmentsCheckDashavailabilityOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAppointmentsCheckDashavailability"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAppointmentsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAppointments"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodConsultationsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3000'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'true'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://www[.]zensoulwellness[.]com\") || $origin.matches(\"https://zensoulwellness[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceConsultations"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodConsultationsAvailabilityOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3000'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'true'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://www[.]zensoulwellness[.]com\") || $origin.matches(\"https://zensoulwellness[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceConsultationsAvailability"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminSeedOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminSeed"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthMeOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthMe"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthSignupPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthSignup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SignupLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthLoginPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "LoginLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthConfirmPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthConfirm"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ConfirmUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ConfirmUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAssessmentPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAssessment"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SubmitAssessmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SubmitAssessmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAssessmentGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAssessment"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AssessmentListLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AssessmentListLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCounsellorsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCounsellors"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListCounsellorsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ListCounsellorsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAppointmentsCheckDashavailabilityGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAppointmentsCheckDashavailability"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CheckAvailabilityLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CheckAvailabilityLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAppointmentsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAppointments"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateAppointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateAppointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodConsultationsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceConsultations"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateConsultationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateConsultationLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodConsultationsAvailabilityGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceConsultationsAvailability"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ConsultationAvailabilityLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ConsultationAvailabilityLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAdminSeedPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminSeed"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreRU89LdMEnApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SeedAdminLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "1UnderscoreRU89LdMEnApiGatewayAuthorizer"
      ]
    },
    "ApiGatewayMethodAuthMeGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthMe"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MeLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "MeLambdaPermissionApiGateway"
      ]
    },
    "1UnderscoreRU89LdMEnApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "1_RU89LdMEn",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Type": "COGNITO_USER_POOLS",
        "ProviderARNs": [
          "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn"
        ]
      }
    },
    "ApiGatewayDeployment1755923888451": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodAuthSignupOptions",
        "ApiGatewayMethodAuthLoginOptions",
        "ApiGatewayMethodAuthConfirmOptions",
        "ApiGatewayMethodAssessmentOptions",
        "ApiGatewayMethodCounsellorsOptions",
        "ApiGatewayMethodAppointmentsCheckDashavailabilityOptions",
        "ApiGatewayMethodAppointmentsOptions",
        "ApiGatewayMethodConsultationsOptions",
        "ApiGatewayMethodConsultationsAvailabilityOptions",
        "ApiGatewayMethodAdminSeedOptions",
        "ApiGatewayMethodAuthMeOptions",
        "ApiGatewayMethodAuthSignupPost",
        "ApiGatewayMethodAuthLoginPost",
        "ApiGatewayMethodAuthConfirmPost",
        "ApiGatewayMethodAssessmentPost",
        "ApiGatewayMethodAssessmentGet",
        "ApiGatewayMethodCounsellorsGet",
        "ApiGatewayMethodAppointmentsCheckDashavailabilityGet",
        "ApiGatewayMethodAppointmentsPost",
        "ApiGatewayMethodConsultationsPost",
        "ApiGatewayMethodConsultationsAvailabilityGet",
        "ApiGatewayMethodAdminSeedPost",
        "ApiGatewayMethodAuthMeGet"
      ]
    },
    "SignupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LoginLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ConfirmUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ConfirmUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SubmitAssessmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SubmitAssessmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AssessmentListLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AssessmentListLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListCounsellorsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListCounsellorsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CheckAvailabilityLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CheckAvailabilityLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateAppointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateAppointmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateConsultationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateConsultationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ConsultationAvailabilityLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ConsultationAvailabilityLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SeedAdminLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SeedAdminLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "MeLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ZenUsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "ZenUsers",
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "EmailIndex",
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "AssessmentsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "ZenAssessments",
        "AttributeDefinitions": [
          {
            "AttributeName": "assessmentId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "assessmentId",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "UserIndex",
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "ZenConsultationsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "ZenConsultations",
        "BillingMode": "PAY_PER_REQUEST",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "date",
            "AttributeType": "S"
          },
          {
            "AttributeName": "time",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "DateIndex",
            "KeySchema": [
              {
                "AttributeName": "date",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "time",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ]
      }
    },
    "GatewayResponseDefault4XX": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseType": "DEFAULT_4XX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
          "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'"
        },
        "StatusCode": "400"
      }
    },
    "GatewayResponseDefault5XX": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseType": "DEFAULT_5XX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
          "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'"
        },
        "StatusCode": "500"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-ap-south-1-218199db-4340",
      "Export": {
        "Name": "sls-zen-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "SignupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignupLambdaVersionfxSTu2CD1jfVk3xFTo9kd2CveFVgPu8JsBq7UL7d8Pw"
      },
      "Export": {
        "Name": "sls-zen-backend-dev-SignupLambdaFunctionQualifiedArn"
      }
    },
    "LoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoginLambdaVersioncim8vn2jU8n7NGP5OnGNRENmSk3aRL2Fso643E8RJ5Y"
      },
      "Export": {
        "Name": "sls-zen-backend-dev-LoginLambdaFunctionQualifiedArn"
      }
    },
    "ConfirmUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ConfirmUserLambdaVersionzMTEEsg5Av1sHZWdeCqv1Cpq3411cS9JzpLhaE"
      },
      "Export": {
        "Name": "sls-zen-backend-dev-ConfirmUserLambdaFunctionQualifiedArn"
      }
    },
    "SubmitAssessmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubmitAssessmentLambdaVersionQhkyCwc4NsBBVPE0TJI2Ccfsa6R1pMIV1ujdkfBg"
      },
      "Export": {
        "Name": "sls-zen-backend-dev-SubmitAssessmentLambdaFunctionQualifiedArn"
      }
    },
    "AssessmentListLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AssessmentListLambdaVersionLy5vvG2sOVDWOQV38b4QmNJJhILVp07zRmT7tqQ88"
      },
      "Export": {
        "Name": "sls-zen-backend-dev-AssessmentListLambdaFunctionQualifiedArn"
      }
    },
    "ListCounsellorsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListCounsellorsLambdaVersiontLdnbwl5P350WtDrnNlN5xxvVI7eRPFIO1nVEmABk"
      },
      "Export": {
        "Name": "sls-zen-backend-dev-ListCounsellorsLambdaFunctionQualifiedArn"
      }
    },
    "CheckAvailabilityLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CheckAvailabilityLambdaVersionoFkjcFzOlReSbX2zlKIIx0if8Vwfx6j4BWDjvQexw"
      },
      "Export": {
        "Name": "sls-zen-backend-dev-CheckAvailabilityLambdaFunctionQualifiedArn"
      }
    },
    "CreateAppointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateAppointmentLambdaVersionVZgrYZRAuxltVZUm5gNOAEjKo9MLkSXZ6IDbVdlk4"
      },
      "Export": {
        "Name": "sls-zen-backend-dev-CreateAppointmentLambdaFunctionQualifiedArn"
      }
    },
    "CreateConsultationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateConsultationLambdaVersionKQX9JQY8j5n31cekqzfFmHMCP7L3EUw54RM22CGsv4M"
      },
      "Export": {
        "Name": "sls-zen-backend-dev-CreateConsultationLambdaFunctionQualifiedArn"
      }
    },
    "ConsultationAvailabilityLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ConsultationAvailabilityLambdaVersionZl4zk6aOrvGQZN14xFW3hRdul5gFT487P8keJ7vs0"
      },
      "Export": {
        "Name": "sls-zen-backend-dev-ConsultationAvailabilityLambdaFunctionQualifiedArn"
      }
    },
    "SeedAdminLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SeedAdminLambdaVersionLumGb1x5rWHcZRwYMO7s0MZUhktsChfJYeawclzmTzw"
      },
      "Export": {
        "Name": "sls-zen-backend-dev-SeedAdminLambdaFunctionQualifiedArn"
      }
    },
    "MeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MeLambdaVersionTRrfz08uuAQzfQPO1NCEvYqvsGjjt0UVQqxDEoQg3zo"
      },
      "Export": {
        "Name": "sls-zen-backend-dev-MeLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-zen-backend-dev-ServiceEndpoint"
      }
    }
  }
}