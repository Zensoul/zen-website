{
  "service": {
    "service": "zen-backend",
    "serviceObject": {
      "name": "zen-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "ap-south-1",
      "profile": "zensoul-dev",
      "environment": {
        "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
        "USERS_TABLE": "ZenUsers",
        "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
        "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
        "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
        "ASSESSMENTS_TABLE": "ZenAssessments",
        "COUNSELLORS_TABLE": "ZenCounsellors",
        "APPOINTMENTS_TABLE": "ZenAppointments",
        "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
        "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
        "CONSULTATIONS_TABLE": "ZenConsultations",
        "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem",
            "dynamodb:GetItem",
            "dynamodb:Query",
            "dynamodb:UpdateItem",
            "dynamodb:Scan",
            "cognito-idp:SignUp",
            "cognito-idp:ConfirmSignUp",
            "cognito-idp:InitiateAuth",
            "cognito-idp:ListUsers",
            "ssm:GetParameter"
          ],
          "Resource": [
            "arn:aws:ssm:ap-south-1:521529522607:parameter/zen/adminSeedToken",
            "arn:aws:dynamodb:ap-south-1:*:table/ZenUsers",
            "arn:aws:dynamodb:ap-south-1:*:table/ZenUsers/index/EmailIndex",
            "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem",
            "dynamodb:Query",
            "dynamodb:Scan"
          ],
          "Resource": [
            "arn:aws:dynamodb:ap-south-1:*:table/ZenAssessments",
            "arn:aws:dynamodb:ap-south-1:*:table/ZenAssessments/index/UserIndex"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:ap-south-1:*:table/ZenCounsellors"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem",
            "dynamodb:Query",
            "dynamodb:Scan"
          ],
          "Resource": [
            "arn:aws:dynamodb:ap-south-1:*:table/ZenAppointments",
            "arn:aws:dynamodb:ap-south-1:*:table/ZenAppointments/index/CounsellorDateSlotIndex"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem",
            "dynamodb:GetItem",
            "dynamodb:Query",
            "dynamodb:UpdateItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:ap-south-1:*:table/ZenConsultations",
            "arn:aws:dynamodb:ap-south-1:*:table/ZenConsultations/index/DateIndex"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Scan"
          ],
          "Resource": "arn:aws:dynamodb:ap-south-1:*:table/ZenUsers"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Scan"
          ],
          "Resource": "arn:aws:dynamodb:ap-south-1:*:table/ZenAppointments"
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "SignupLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-signup"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-login"
            }
          },
          "ConfirmUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-confirmUser"
            }
          },
          "SubmitAssessmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-submitAssessment"
            }
          },
          "AssessmentListLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-assessmentList"
            }
          },
          "ListCounsellorsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-listCounsellors"
            }
          },
          "CheckAvailabilityLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-checkAvailability"
            }
          },
          "CreateAppointmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-createAppointment"
            }
          },
          "CreateConsultationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-createConsultation"
            }
          },
          "ConsultationAvailabilityLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-consultationAvailability"
            }
          },
          "SeedAdminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-seedAdmin"
            }
          },
          "AdminMeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-adminMe"
            }
          },
          "AuthMeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-authMe"
            }
          },
          "AdminStatsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-adminStats"
            }
          },
          "AdminUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-adminUsers"
            }
          },
          "AdminAppointmentsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-adminAppointments"
            }
          },
          "AdminCounsellorsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-adminCounsellors"
            }
          },
          "RecommendTherapistsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/zen-backend-dev-recommendTherapists"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "zen-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zen-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/zen-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][3]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][4]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][5]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][6]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "zen-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "SignupLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/auth/signup.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-signup",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignupLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/auth/login.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-login",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "ConfirmUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/auth/confirm.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-confirmUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConfirmUserLogGroup"
            ]
          },
          "SubmitAssessmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/assessment/submit.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-submitAssessment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SubmitAssessmentLogGroup"
            ]
          },
          "AssessmentListLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/assessment/list.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-assessmentList",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AssessmentListLogGroup"
            ]
          },
          "ListCounsellorsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/counsellors/list.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-listCounsellors",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListCounsellorsLogGroup"
            ]
          },
          "CheckAvailabilityLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/appointments/checkAvailability.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-checkAvailability",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CheckAvailabilityLogGroup"
            ]
          },
          "CreateAppointmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/appointments/createAppointment.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-createAppointment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateAppointmentLogGroup"
            ]
          },
          "CreateConsultationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/consultations/create.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-createConsultation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateConsultationLogGroup"
            ]
          },
          "ConsultationAvailabilityLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/consultations/checkAvailability.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-consultationAvailability",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConsultationAvailabilityLogGroup"
            ]
          },
          "SeedAdminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/admin/seed.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-seedAdmin",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SeedAdminLogGroup"
            ]
          },
          "AdminMeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/admin/me.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-adminMe",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AdminMeLogGroup"
            ]
          },
          "AuthMeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/auth/me.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-authMe",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthMeLogGroup"
            ]
          },
          "AdminStatsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/admin/stats.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-adminStats",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AdminStatsLogGroup"
            ]
          },
          "AdminUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/admin/users.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-adminUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AdminUsersLogGroup"
            ]
          },
          "AdminAppointmentsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/admin/appointments.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-adminAppointments",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AdminAppointmentsLogGroup"
            ]
          },
          "AdminCounsellorsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/admin/counsellors.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-adminCounsellors",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AdminCounsellorsLogGroup"
            ]
          },
          "RecommendTherapistsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-218199db-4340",
                "S3Key": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z/zen-backend.zip"
              },
              "Handler": "functions/match/recommend.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "zen-backend-dev-recommendTherapists",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "COGNITO_USER_POOL_ID": "ap-south-1_RU89LdMEn",
                  "USERS_TABLE": "ZenUsers",
                  "JWT_SECRET": "3da13114b94fd31a1e357b568f7f46124528baac3902e82dbe7c9c6efe168f36",
                  "COGNITO_CLIENT_ID": "4eno2hc46uq99e9e23v54gcp6f",
                  "COGNITO_USER_POOL_ARN": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                  "ASSESSMENTS_TABLE": "ZenAssessments",
                  "COUNSELLORS_TABLE": "ZenCounsellors",
                  "APPOINTMENTS_TABLE": "ZenAppointments",
                  "ADMIN_SEED_TOKEN": "cc95e2a31896995d437fb35208b3215131fcbbedc9147091eb35f867aa5722b4",
                  "ADMIN_SEED_TOKEN_PATH": "/zen/adminSeedToken",
                  "CONSULTATIONS_TABLE": "ZenConsultations",
                  "ALLOWED_ORIGINS": "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RecommendTherapistsLogGroup"
            ]
          },
          "SignupLambdaVersiono9YxCVeauCuHgUtdmpkvNfAKili6hUtf0vj27w3RI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignupLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "LoginLambdaVersiontkVGWlGp5KVG3vwweKyJIfVixLxP8DLNYZCsraAM8A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "ConfirmUserLambdaVersionyI3rT6UJ6ToLFBq9aJWdubSQaNEyHEsb2wvceB5K0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConfirmUserLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "SubmitAssessmentLambdaVersions3JmKGxDoqwRdjTMWhhB9hfTN538UuYeaTeGIZPLUI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SubmitAssessmentLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "AssessmentListLambdaVersionjXGTHjOThzHfZgjNeooELAVh1ls33S7A758jCuN4M8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AssessmentListLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "ListCounsellorsLambdaVersionkutRHEF96GbN5GvEJ0KM2dyYsQLoeAsvSkl6zdx8cw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListCounsellorsLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "CheckAvailabilityLambdaVersionKdOuSohVt7m2Qw3qFApAfhAt8xXmVJxk5zxlGY2fy8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CheckAvailabilityLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "CreateAppointmentLambdaVersionBLi7wsGXaFofSWa7U9dUumBqwLrGISShXhhwqtepSIU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateAppointmentLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "CreateConsultationLambdaVersionH3voFE9WoDfTT3zWjjTW8TkDwfNd5S000ezGJobWI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateConsultationLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "ConsultationAvailabilityLambdaVersionTp5WMNirlIlThiJipFrEANMpQQrWXOMyWACfITd3M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConsultationAvailabilityLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "SeedAdminLambdaVersionHwaxtttbc6l4CQrGCaMdh8jWPy5TH4CCUEcms4EG0o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SeedAdminLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "AdminMeLambdaVersionRGFkVp5ZDMRATkvUWdAqUkKmuCIV74z4mZZNkz52E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AdminMeLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "AuthMeLambdaVersionrhw0sVRES1hQT2sFSsPyvJD3YjXqGnsYlPuBGoOE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthMeLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "AdminStatsLambdaVersion8dRoGCU0rXgwzZgOEAdkkPosxCNExAT1RcshdYgZH8w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AdminStatsLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "AdminUsersLambdaVersioniVyW30n3xnIv77Vq9TZPz62F9ZYQP801TWeIgnvg3QU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AdminUsersLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "AdminAppointmentsLambdaVersionu2ZW6VJD1AAiG08gC8dORcrSGHUZOtD6euNI3oH9oyk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AdminAppointmentsLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "AdminCounsellorsLambdaVersion4Y9MQZmz2szdpNWHrZKpG4ph8BqQlIipS9BzhPU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AdminCounsellorsLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "RecommendTherapistsLambdaVersionhCj8IWG3Jhub8xYSHV96kZVzdduEcwJ2wIJpwj26Js": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RecommendTherapistsLambdaFunction"
              },
              "CodeSha256": "7ZRenoEsuKxMSS0yZDQEu3naD0PQ6EbSS3scoCNh//c="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-zen-backend",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthSignup": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "signup",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthConfirm": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "confirm",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthMe": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "me",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAssessment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "assessment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCounsellors": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "counsellors",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppointments": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "appointments",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppointmentsCheckDashavailability": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAppointments"
              },
              "PathPart": "check-availability",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceConsultations": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "consultations",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceConsultationsAvailability": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceConsultations"
              },
              "PathPart": "availability",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdmin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "admin",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminSeed": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "seed",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminMe": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "me",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminStats": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "stats",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminAppointments": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "appointments",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminCounsellors": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "counsellors",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatch": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "match",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatchRecommend": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceMatch"
              },
              "PathPart": "recommend",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthSignupOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthSignup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthConfirmOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthConfirm"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAssessmentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAssessment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCounsellorsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCounsellors"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppointmentsCheckDashavailabilityOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointmentsCheckDashavailability"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppointmentsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodConsultationsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3000'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://www[.]zensoulwellness[.]com\") || $origin.matches(\"https://zensoulwellness[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceConsultations"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodConsultationsAvailabilityOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3000'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://www[.]zensoulwellness[.]com\") || $origin.matches(\"https://zensoulwellness[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceConsultationsAvailability"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminSeedOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminSeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminMeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3000'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://www[.]zensoulwellness[.]com\") || $origin.matches(\"https://zensoulwellness[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthMeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3000'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://www[.]zensoulwellness[.]com\") || $origin.matches(\"https://zensoulwellness[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminStatsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3000'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://www[.]zensoulwellness[.]com\") || $origin.matches(\"https://zensoulwellness[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminStats"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminUsersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3000'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://www[.]zensoulwellness[.]com\") || $origin.matches(\"https://zensoulwellness[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminAppointmentsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3000'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://www[.]zensoulwellness[.]com\") || $origin.matches(\"https://zensoulwellness[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminAppointments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminCounsellorsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3000'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://www[.]zensoulwellness[.]com\") || $origin.matches(\"https://zensoulwellness[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminCounsellors"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMatchRecommendOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3000'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://www[.]zensoulwellness[.]com\") || $origin.matches(\"https://zensoulwellness[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchRecommend"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthSignupPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthSignup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignupLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SignupLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthConfirmPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthConfirm"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ConfirmUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ConfirmUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAssessmentPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAssessment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SubmitAssessmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SubmitAssessmentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAssessmentGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAssessment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AssessmentListLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AssessmentListLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCounsellorsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCounsellors"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListCounsellorsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListCounsellorsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAppointmentsCheckDashavailabilityGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointmentsCheckDashavailability"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CheckAvailabilityLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CheckAvailabilityLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAppointmentsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppointments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateAppointmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateAppointmentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodConsultationsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceConsultations"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateConsultationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateConsultationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodConsultationsAvailabilityGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceConsultationsAvailability"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ConsultationAvailabilityLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ConsultationAvailabilityLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminSeedPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminSeed"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "1UnderscoreRU89LdMEnApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SeedAdminLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "1UnderscoreRU89LdMEnApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAdminMeGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminMeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminMeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthMeGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthMeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthMeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminStatsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminStats"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminStatsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminStatsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminUsersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminUsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminAppointmentsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminAppointments"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminAppointmentsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminAppointmentsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminCounsellorsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminCounsellors"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminCounsellorsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminCounsellorsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminCounsellorsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminCounsellors"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminCounsellorsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminCounsellorsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminCounsellorsPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminCounsellors"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminCounsellorsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminCounsellorsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminCounsellorsDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminCounsellors"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminCounsellorsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminCounsellorsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMatchRecommendPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchRecommend"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RecommendTherapistsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RecommendTherapistsLambdaPermissionApiGateway"
            ]
          },
          "1UnderscoreRU89LdMEnApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "1_RU89LdMEn",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Type": "COGNITO_USER_POOLS",
              "ProviderARNs": [
                "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn"
              ]
            }
          },
          "ApiGatewayDeployment1756209447252": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAuthSignupOptions",
              "ApiGatewayMethodAuthLoginOptions",
              "ApiGatewayMethodAuthConfirmOptions",
              "ApiGatewayMethodAssessmentOptions",
              "ApiGatewayMethodCounsellorsOptions",
              "ApiGatewayMethodAppointmentsCheckDashavailabilityOptions",
              "ApiGatewayMethodAppointmentsOptions",
              "ApiGatewayMethodConsultationsOptions",
              "ApiGatewayMethodConsultationsAvailabilityOptions",
              "ApiGatewayMethodAdminSeedOptions",
              "ApiGatewayMethodAdminMeOptions",
              "ApiGatewayMethodAuthMeOptions",
              "ApiGatewayMethodAdminStatsOptions",
              "ApiGatewayMethodAdminUsersOptions",
              "ApiGatewayMethodAdminAppointmentsOptions",
              "ApiGatewayMethodAdminCounsellorsOptions",
              "ApiGatewayMethodMatchRecommendOptions",
              "ApiGatewayMethodAuthSignupPost",
              "ApiGatewayMethodAuthLoginPost",
              "ApiGatewayMethodAuthConfirmPost",
              "ApiGatewayMethodAssessmentPost",
              "ApiGatewayMethodAssessmentGet",
              "ApiGatewayMethodCounsellorsGet",
              "ApiGatewayMethodAppointmentsCheckDashavailabilityGet",
              "ApiGatewayMethodAppointmentsPost",
              "ApiGatewayMethodConsultationsPost",
              "ApiGatewayMethodConsultationsAvailabilityGet",
              "ApiGatewayMethodAdminSeedPost",
              "ApiGatewayMethodAdminMeGet",
              "ApiGatewayMethodAuthMeGet",
              "ApiGatewayMethodAdminStatsGet",
              "ApiGatewayMethodAdminUsersGet",
              "ApiGatewayMethodAdminAppointmentsGet",
              "ApiGatewayMethodAdminCounsellorsGet",
              "ApiGatewayMethodAdminCounsellorsPost",
              "ApiGatewayMethodAdminCounsellorsPut",
              "ApiGatewayMethodAdminCounsellorsDelete",
              "ApiGatewayMethodMatchRecommendPost"
            ]
          },
          "SignupLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignupLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ConfirmUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConfirmUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SubmitAssessmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubmitAssessmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AssessmentListLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AssessmentListLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListCounsellorsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListCounsellorsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CheckAvailabilityLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CheckAvailabilityLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateAppointmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateAppointmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateConsultationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateConsultationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ConsultationAvailabilityLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConsultationAvailabilityLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SeedAdminLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SeedAdminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AdminMeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AdminMeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthMeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthMeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AdminStatsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AdminStatsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AdminUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AdminUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AdminAppointmentsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AdminAppointmentsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AdminCounsellorsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AdminCounsellorsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RecommendTherapistsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RecommendTherapistsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ZenUsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ZenUsers",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "EmailIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "email",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "AssessmentsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ZenAssessments",
              "AttributeDefinitions": [
                {
                  "AttributeName": "assessmentId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "assessmentId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "UserIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "ZenConsultationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "ZenConsultations",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "date",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "time",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "DateIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "date",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "time",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "GatewayResponseDefault4XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseType": "DEFAULT_4XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'"
              },
              "StatusCode": "400"
            }
          },
          "GatewayResponseDefault5XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseType": "DEFAULT_5XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'"
              },
              "StatusCode": "500"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-ap-south-1-218199db-4340",
            "Export": {
              "Name": "sls-zen-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "SignupLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignupLambdaVersiono9YxCVeauCuHgUtdmpkvNfAKili6hUtf0vj27w3RI"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-SignupLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersiontkVGWlGp5KVG3vwweKyJIfVixLxP8DLNYZCsraAM8A"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "ConfirmUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConfirmUserLambdaVersionyI3rT6UJ6ToLFBq9aJWdubSQaNEyHEsb2wvceB5K0"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-ConfirmUserLambdaFunctionQualifiedArn"
            }
          },
          "SubmitAssessmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SubmitAssessmentLambdaVersions3JmKGxDoqwRdjTMWhhB9hfTN538UuYeaTeGIZPLUI"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-SubmitAssessmentLambdaFunctionQualifiedArn"
            }
          },
          "AssessmentListLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AssessmentListLambdaVersionjXGTHjOThzHfZgjNeooELAVh1ls33S7A758jCuN4M8"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-AssessmentListLambdaFunctionQualifiedArn"
            }
          },
          "ListCounsellorsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListCounsellorsLambdaVersionkutRHEF96GbN5GvEJ0KM2dyYsQLoeAsvSkl6zdx8cw"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-ListCounsellorsLambdaFunctionQualifiedArn"
            }
          },
          "CheckAvailabilityLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CheckAvailabilityLambdaVersionKdOuSohVt7m2Qw3qFApAfhAt8xXmVJxk5zxlGY2fy8"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-CheckAvailabilityLambdaFunctionQualifiedArn"
            }
          },
          "CreateAppointmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateAppointmentLambdaVersionBLi7wsGXaFofSWa7U9dUumBqwLrGISShXhhwqtepSIU"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-CreateAppointmentLambdaFunctionQualifiedArn"
            }
          },
          "CreateConsultationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateConsultationLambdaVersionH3voFE9WoDfTT3zWjjTW8TkDwfNd5S000ezGJobWI"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-CreateConsultationLambdaFunctionQualifiedArn"
            }
          },
          "ConsultationAvailabilityLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConsultationAvailabilityLambdaVersionTp5WMNirlIlThiJipFrEANMpQQrWXOMyWACfITd3M"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-ConsultationAvailabilityLambdaFunctionQualifiedArn"
            }
          },
          "SeedAdminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SeedAdminLambdaVersionHwaxtttbc6l4CQrGCaMdh8jWPy5TH4CCUEcms4EG0o"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-SeedAdminLambdaFunctionQualifiedArn"
            }
          },
          "AdminMeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AdminMeLambdaVersionRGFkVp5ZDMRATkvUWdAqUkKmuCIV74z4mZZNkz52E"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-AdminMeLambdaFunctionQualifiedArn"
            }
          },
          "AuthMeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthMeLambdaVersionrhw0sVRES1hQT2sFSsPyvJD3YjXqGnsYlPuBGoOE"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-AuthMeLambdaFunctionQualifiedArn"
            }
          },
          "AdminStatsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AdminStatsLambdaVersion8dRoGCU0rXgwzZgOEAdkkPosxCNExAT1RcshdYgZH8w"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-AdminStatsLambdaFunctionQualifiedArn"
            }
          },
          "AdminUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AdminUsersLambdaVersioniVyW30n3xnIv77Vq9TZPz62F9ZYQP801TWeIgnvg3QU"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-AdminUsersLambdaFunctionQualifiedArn"
            }
          },
          "AdminAppointmentsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AdminAppointmentsLambdaVersionu2ZW6VJD1AAiG08gC8dORcrSGHUZOtD6euNI3oH9oyk"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-AdminAppointmentsLambdaFunctionQualifiedArn"
            }
          },
          "AdminCounsellorsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AdminCounsellorsLambdaVersion4Y9MQZmz2szdpNWHrZKpG4ph8BqQlIipS9BzhPU"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-AdminCounsellorsLambdaFunctionQualifiedArn"
            }
          },
          "RecommendTherapistsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RecommendTherapistsLambdaVersionhCj8IWG3Jhub8xYSHV96kZVzdduEcwJ2wIJpwj26Js"
            },
            "Export": {
              "Name": "sls-zen-backend-dev-RecommendTherapistsLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-zen-backend-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "serverless-offline": {
        "httpPort": 3001,
        "lambdaPort": 3002,
        "noPrependStageInUrl": false,
        "stage": "dev"
      }
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "signup": {
        "handler": "functions/auth/signup.handler",
        "events": [
          {
            "http": {
              "path": "auth/signup",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-signup",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SignupLambdaVersiono9YxCVeauCuHgUtdmpkvNfAKili6hUtf0vj27w3RI"
      },
      "login": {
        "handler": "functions/auth/login.handler",
        "events": [
          {
            "http": {
              "path": "auth/login",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-login",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersiontkVGWlGp5KVG3vwweKyJIfVixLxP8DLNYZCsraAM8A"
      },
      "confirmUser": {
        "handler": "functions/auth/confirm.handler",
        "events": [
          {
            "http": {
              "path": "auth/confirm",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-confirmUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ConfirmUserLambdaVersionyI3rT6UJ6ToLFBq9aJWdubSQaNEyHEsb2wvceB5K0"
      },
      "submitAssessment": {
        "handler": "functions/assessment/submit.handler",
        "events": [
          {
            "http": {
              "path": "assessment",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-submitAssessment",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SubmitAssessmentLambdaVersions3JmKGxDoqwRdjTMWhhB9hfTN538UuYeaTeGIZPLUI"
      },
      "assessmentList": {
        "handler": "functions/assessment/list.handler",
        "events": [
          {
            "http": {
              "path": "assessment",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-assessmentList",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AssessmentListLambdaVersionjXGTHjOThzHfZgjNeooELAVh1ls33S7A758jCuN4M8"
      },
      "listCounsellors": {
        "handler": "functions/counsellors/list.handler",
        "events": [
          {
            "http": {
              "path": "counsellors",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-listCounsellors",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ListCounsellorsLambdaVersionkutRHEF96GbN5GvEJ0KM2dyYsQLoeAsvSkl6zdx8cw"
      },
      "checkAvailability": {
        "handler": "functions/appointments/checkAvailability.handler",
        "events": [
          {
            "http": {
              "path": "appointments/check-availability",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-checkAvailability",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CheckAvailabilityLambdaVersionKdOuSohVt7m2Qw3qFApAfhAt8xXmVJxk5zxlGY2fy8"
      },
      "createAppointment": {
        "handler": "functions/appointments/createAppointment.handler",
        "events": [
          {
            "http": {
              "path": "appointments",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-createAppointment",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateAppointmentLambdaVersionBLi7wsGXaFofSWa7U9dUumBqwLrGISShXhhwqtepSIU"
      },
      "createConsultation": {
        "handler": "functions/consultations/create.handler",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "consultations",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3000",
                  "https://www.zensoulwellness.com",
                  "https://zensoulwellness.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-createConsultation",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateConsultationLambdaVersionH3voFE9WoDfTT3zWjjTW8TkDwfNd5S000ezGJobWI"
      },
      "consultationAvailability": {
        "handler": "functions/consultations/checkAvailability.handler",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "consultations/availability",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3000",
                  "https://www.zensoulwellness.com",
                  "https://zensoulwellness.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-consultationAvailability",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ConsultationAvailabilityLambdaVersionTp5WMNirlIlThiJipFrEANMpQQrWXOMyWACfITd3M"
      },
      "seedAdmin": {
        "handler": "functions/admin/seed.handler",
        "events": [
          {
            "http": {
              "path": "admin/seed",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "name": "1_RU89LdMEn",
                "arn": "arn:aws:cognito-idp:ap-south-1:521529522607:userpool/ap-south-1_RU89LdMEn",
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-seedAdmin",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SeedAdminLambdaVersionHwaxtttbc6l4CQrGCaMdh8jWPy5TH4CCUEcms4EG0o"
      },
      "adminMe": {
        "handler": "functions/admin/me.handler",
        "events": [
          {
            "http": {
              "path": "admin/me",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "allowCredentials": false,
                "origins": [
                  "http://localhost:3000",
                  "https://www.zensoulwellness.com",
                  "https://zensoulwellness.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-adminMe",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AdminMeLambdaVersionRGFkVp5ZDMRATkvUWdAqUkKmuCIV74z4mZZNkz52E"
      },
      "authMe": {
        "handler": "functions/auth/me.handler",
        "events": [
          {
            "http": {
              "path": "auth/me",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "allowCredentials": false,
                "origins": [
                  "http://localhost:3000",
                  "https://www.zensoulwellness.com",
                  "https://zensoulwellness.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-authMe",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AuthMeLambdaVersionrhw0sVRES1hQT2sFSsPyvJD3YjXqGnsYlPuBGoOE"
      },
      "adminStats": {
        "handler": "functions/admin/stats.handler",
        "events": [
          {
            "http": {
              "path": "admin/stats",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "allowCredentials": false,
                "origins": [
                  "http://localhost:3000",
                  "https://www.zensoulwellness.com",
                  "https://zensoulwellness.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-adminStats",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AdminStatsLambdaVersion8dRoGCU0rXgwzZgOEAdkkPosxCNExAT1RcshdYgZH8w"
      },
      "adminUsers": {
        "handler": "functions/admin/users.handler",
        "events": [
          {
            "http": {
              "path": "admin/users",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "allowCredentials": false,
                "origins": [
                  "http://localhost:3000",
                  "https://www.zensoulwellness.com",
                  "https://zensoulwellness.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-adminUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AdminUsersLambdaVersioniVyW30n3xnIv77Vq9TZPz62F9ZYQP801TWeIgnvg3QU"
      },
      "adminAppointments": {
        "handler": "functions/admin/appointments.handler",
        "events": [
          {
            "http": {
              "path": "admin/appointments",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "allowCredentials": false,
                "origins": [
                  "http://localhost:3000",
                  "https://www.zensoulwellness.com",
                  "https://zensoulwellness.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-adminAppointments",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AdminAppointmentsLambdaVersionu2ZW6VJD1AAiG08gC8dORcrSGHUZOtD6euNI3oH9oyk"
      },
      "adminCounsellors": {
        "handler": "functions/admin/counsellors.handler",
        "events": [
          {
            "http": {
              "path": "admin/counsellors",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "allowCredentials": false,
                "origins": [
                  "http://localhost:3000",
                  "https://www.zensoulwellness.com",
                  "https://zensoulwellness.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "admin/counsellors",
              "method": "post",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "allowCredentials": false,
                "origins": [
                  "http://localhost:3000",
                  "https://www.zensoulwellness.com",
                  "https://zensoulwellness.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "admin/counsellors",
              "method": "put",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "allowCredentials": false,
                "origins": [
                  "http://localhost:3000",
                  "https://www.zensoulwellness.com",
                  "https://zensoulwellness.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "admin/counsellors",
              "method": "delete",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "allowCredentials": false,
                "origins": [
                  "http://localhost:3000",
                  "https://www.zensoulwellness.com",
                  "https://zensoulwellness.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-adminCounsellors",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AdminCounsellorsLambdaVersion4Y9MQZmz2szdpNWHrZKpG4ph8BqQlIipS9BzhPU"
      },
      "recommendTherapists": {
        "handler": "functions/match/recommend.handler",
        "events": [
          {
            "http": {
              "path": "match/recommend",
              "method": "post",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "Authorization"
                ],
                "allowCredentials": false,
                "origins": [
                  "http://localhost:3000",
                  "https://www.zensoulwellness.com",
                  "https://zensoulwellness.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "zen-backend-dev-recommendTherapists",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RecommendTherapistsLambdaVersionhCj8IWG3Jhub8xYSHV96kZVzdduEcwJ2wIJpwj26Js"
      }
    },
    "resources": {
      "Resources": {
        "ZenUsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "ZenUsers",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "EmailIndex",
                "KeySchema": [
                  {
                    "AttributeName": "email",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "AssessmentsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "ZenAssessments",
            "AttributeDefinitions": [
              {
                "AttributeName": "assessmentId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "assessmentId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "UserIndex",
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "ZenConsultationsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "ZenConsultations",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "date",
                "AttributeType": "S"
              },
              {
                "AttributeName": "time",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "DateIndex",
                "KeySchema": [
                  {
                    "AttributeName": "date",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "time",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "GatewayResponseDefault4XX": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseType": "DEFAULT_4XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
              "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'"
            },
            "StatusCode": "400"
          }
        },
        "GatewayResponseDefault5XX": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseType": "DEFAULT_5XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
              "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'"
            },
            "StatusCode": "500"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "zen-backend",
      "useDotenv": true,
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {},
    "artifact": "C:\\Users\\FCI\\Desktop\\zen-website\\zen-website\\backend\\.serverless\\zen-backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/zen-backend/dev/1756209466494-2025-08-26T11:57:46.494Z",
    "artifact": "zen-backend.zip"
  }
}