service: zen-backend
useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-south-1
  profile: zensoul-dev

  environment:
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}   # <-- ADD THIS
    USERS_TABLE: ZenUsers
    JWT_SECRET: ${env:JWT_SECRET}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    # Add your User Pool ARN in .env as COGNITO_USER_POOL_ARN
    COGNITO_USER_POOL_ARN: ${env:COGNITO_USER_POOL_ARN}
    ASSESSMENTS_TABLE: ${env:ASSESSMENTS_TABLE, 'ZenAssessments'}
    COUNSELLORS_TABLE: ${env:COUNSELLORS_TABLE, 'ZenCounsellors'}
    APPOINTMENTS_TABLE: ZenAppointments
    ADMIN_SEED_TOKEN: ${env:ADMIN_SEED_TOKEN, 'unset'}
    ADMIN_SEED_TOKEN_PATH: /zen/adminSeedToken
    CONSULTATIONS_TABLE: ZenConsultations
    ALLOWED_ORIGINS: "http://localhost:3000,https://www.zensoulwellness.com,https://zensoulwellness.com"
    

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:UpdateItem
        - dynamodb:Scan           # <-- add this
        - cognito-idp:SignUp
        - cognito-idp:ConfirmSignUp
        - cognito-idp:InitiateAuth
        - cognito-idp:ListUsers                                  # <-- ADD
        - ssm:GetParameter
      Resource:
        - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/zen/adminSeedToken
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/EmailIndex
        - arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${self:provider.environment.COGNITO_USER_POOL_ID}

    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan           # <-- add this
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSESSMENTS_TABLE}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSESSMENTS_TABLE}/index/UserIndex

    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem         # ADD
        - dynamodb:UpdateItem      # ADD
        - dynamodb:DeleteItem      # ADD
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COUNSELLORS_TABLE}

    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan           # <-- add this
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/ZenAppointments
        - arn:aws:dynamodb:${self:provider.region}:*:table/ZenAppointments/index/CounsellorDateSlotIndex

    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/ZenConsultations
        - arn:aws:dynamodb:${self:provider.region}:*:table/ZenConsultations/index/DateIndex

    - Effect: Allow
      Action: [ dynamodb:Scan ]
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

    # For appointments list scanning ZenAppointments (admin/appointments)
    - Effect: Allow
      Action: [ dynamodb:Scan ]
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/ZenAppointments    

functions:
  # Auth (REST) — public
  signup:
    handler: functions/auth/signup.handler
    events:
      - http:
          path: /auth/signup
          method: post
          cors: true

  login:
    handler: functions/auth/login.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true

  confirmUser:
    handler: functions/auth/confirm.handler
    events:
      - http:
          path: /auth/confirm
          method: post
          cors: true

  # Assessments (REST) — requires a logged-in user on the frontend; backend stays open unless you add authorizer
  submitAssessment:
    handler: functions/assessment/submit.handler
    events:
      - http:
          path: /assessment
          method: post
          cors: true

  assessmentList:
    handler: functions/assessment/list.handler
    events:
      - http:
          path: /assessment
          method: get
          cors: true

  # Counsellors (REST)
  listCounsellors:
    handler: functions/counsellors/list.handler
    events:
      - http:
          path: /counsellors
          method: get
          cors: true

  # Appointments (REST)
  checkAvailability:
    handler: functions/appointments/checkAvailability.handler
    events:
      - http:
          path: /appointments/check-availability
          method: get
          cors: true

  createAppointment:
    handler: functions/appointments/createAppointment.handler
    events:
      - http:
          path: /appointments
          method: post
          cors: true

  # Consultations (REST — using API Gateway v1 'http' so CORS config below works)
  createConsultation:
    handler: functions/consultations/create.handler
    events:
      - http:
          method: post
          path: /consultations
          cors:
            origins:
              - http://localhost:3000
              - https://www.zensoulwellness.com
              - https://zensoulwellness.com
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  consultationAvailability:
    handler: functions/consultations/checkAvailability.handler
    events:
      - http:
          method: get
          path: /consultations/availability
          cors:
            origins:
              - http://localhost:3000
              - https://www.zensoulwellness.com
              - https://zensoulwellness.com
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  seedAdmin:
    handler: functions/admin/seed.handler
    events:
      - http:
          path: /admin/seed
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            arn: ${self:provider.environment.COGNITO_USER_POOL_ARN}  # HIGHLIGHT: use ARN var
        
  adminMe:
    handler: functions/admin/me.handler
    events:
      - http:
          path: admin/me
          method: get
          cors:
            origins:
              - http://localhost:3000
              - https://www.zensoulwellness.com
              - https://zensoulwellness.com
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  authMe:
    handler: functions/auth/me.handler
    events:
      - http:
          path: auth/me
          method: get
          cors:
            origins: [http://localhost:3000, https://www.zensoulwellness.com, https://zensoulwellness.com]
            headers: [Content-Type, Authorization]
            allowCredentials: false          

  adminStats:
    handler: functions/admin/stats.handler
    events:
      - http:
          path: admin/stats
          method: get
          cors:
            origins:
              - http://localhost:3000
              - https://www.zensoulwellness.com
              - https://zensoulwellness.com
            headers: [Content-Type, Authorization]
            allowCredentials: false
          # authorizer: (same as above)

  adminUsers:
    handler: functions/admin/users.handler
    events:
      - http:
          path: admin/users
          method: get
          cors:
            origins:
              - http://localhost:3000
              - https://www.zensoulwellness.com
              - https://zensoulwellness.com
            headers: [Content-Type, Authorization]
            allowCredentials: false

  adminAppointments:
    handler: functions/admin/appointments.handler
    events:
      - http:
          path: admin/appointments
          method: get
          cors:
            origins:
              - http://localhost:3000
              - https://www.zensoulwellness.com
              - https://zensoulwellness.com
            headers: [Content-Type, Authorization]
            allowCredentials: false                  

  adminCounsellors:
    handler: functions/admin/counsellors.handler
    events:
      - http: { path: admin/counsellors, method: get,  cors: { origins: [http://localhost:3000, https://www.zensoulwellness.com, https://zensoulwellness.com], headers: [Content-Type, Authorization], allowCredentials: false } }
      - http: { path: admin/counsellors, method: post, cors: { origins: [http://localhost:3000, https://www.zensoulwellness.com, https://zensoulwellness.com], headers: [Content-Type, Authorization], allowCredentials: false } }
      - http: { path: admin/counsellors, method: put,  cors: { origins: [http://localhost:3000, https://www.zensoulwellness.com, https://zensoulwellness.com], headers: [Content-Type, Authorization], allowCredentials: false } }
      - http: { path: admin/counsellors, method: delete, cors: { origins: [http://localhost:3000, https://www.zensoulwellness.com, https://zensoulwellness.com], headers: [Content-Type, Authorization], allowCredentials: false } }                               

  recommendTherapists:
    handler: functions/match/recommend.handler
    events:
      - http:
          path: match/recommend
          method: post
          cors:
            origins:
              - http://localhost:3000
              - https://www.zensoulwellness.com
              - https://zensoulwellness.com
            headers: [Content-Type, Authorization]
            allowCredentials: false    

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3001
    lambdaPort: 3002
    noPrependStageInUrl: false
    stage: ${sls:stage}

resources:
  Resources:

    ZenUsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    AssessmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ASSESSMENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: assessmentId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: assessmentId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    ZenConsultationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ZenConsultations
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: date
            AttributeType: S
          - AttributeName: time
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: DateIndex
            KeySchema:
              - AttributeName: date
                KeyType: HASH
              - AttributeName: time
                KeyType: RANGE
            Projection:
              ProjectionType: ALL       

    # API Gateway default responses with CORS so 401/403/500 include CORS headers
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        StatusCode: '400'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        StatusCode: '500'

  # Note: The ZenCounsellorsTable resource is not created here since it already exists.
